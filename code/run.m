%% Weiner model v3 
% v1 implements the weiner model with guessing contaminant variable
% v2 keeps trial order intact rather than splitting by condition then looping
% v3 implements delayed response trials
% v4 includes both groups, parameter comparison variables added
% v5 includes extra delta paameters for easy analysis

%% final variables (calculated):

%% final variables (bayesian):
clear;
close all;
addpath("../trinity-master")
trinity install

proj_id = 'model_05'


model = strcat('models/', proj_id, '.jags');
fid = fopen(strcat('models/',proj_id, '.params'),'r');
monitorParameters = textscan(fid,'%s','delimiter','\n'); 
monitorParameters = transpose(monitorParameters{1})
fclose(fid);

load("../data/processed/data.mat");

y = rt;
% Cut out all RTs that are < .5
z = abs(y(:));
lower_cutoff = nanmean(z) - 2*nanstd(z)
upper_cutoff = nanmean(z) + 2*nanstd(z)

y(abs(y)<lower_cutoff) = nan;
y(abs(y)>upper_cutoff) = nan;

data = struct(...
    'nAllSubj'       ,   size(subjList,2)      , ...
    'nRuns'      ,   4          , ...
    'nBlocks'               ,   2               , ...
    'nTrials'               ,   25              , ...
    'y'               ,   y               , ...
    'condRaceList'     ,   condRaceList             , ...
    'condList'         ,   condList);



generator = @()struct(...
    'z'     , ceil(rand(size(subjList,2), 4, 2, 25, 1)) , ...
    'phi'   , rand(size(subjList,2), 1), ...
    'alphagroupmu', 1, ...
    'betagroupmu', .5, ...
    'taugroupmu', .5, ...
    'alphagroupsd', .01, ...
    'betagroupsd', .01, ...
    'taugroupsd', .01); 

disp('Running!')
tic
  [stats, chains, diagnostics, info] = callbayes('jags', ...
    'model'          ,     model , ...
    'data'           ,      data , ...
    'outputname'     , 'samples' , ...
    'init'           , generator , ...
    'nchains'        ,  6  , ...
    'nburnin'        ,  10000  , ...
    'nsamples'       , 50000  , ...
    'monitorparams'  ,    monitorParameters , ...
    'thin'           ,    1  , ...
    'workingdir'     ,   ['/tmp/yassamri2/ORE/DriftDiffusion/storage/' proj_id] , ...
    'verbosity'      ,        0  , ...
    'saveoutput'     ,     true  , ...
    'parallel'       ,1 , ...
    'modules'        ,  {'dic', 'wiener'}  );

% Print and save
fprintf('%s took %f seconds!\n', upper('jags'), toc)
disp('Saving...')
save(strcat('../storage/',proj_id, '.mat'), 'stats', 'chains', 'diagnostics', 'info', 'data', '-v7.3');
disp('Saved!')
mean(chains.deviance(:))


%% Inspect the results
% First, inspect the convergence of each parameter
disp('Convergence statistics:')
grtable(chains, 1.05)
return;
%%
